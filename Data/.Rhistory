student_scores <- student_scores %>%
mutate(
new_math_score = unlist(map(math_score, format_score)),
new_science_score = unlist(map(science_score, format_score))
)
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = map(writing_score, format_score)
)
colnames(student_scores)
student_scores$new_writing_score[1:3]
student_scores <- student_scores %>%
mutate(
new_writing_score = unlist(map(writing_score, format_score))
)
student_scores$new_writing_score
# Two inputs vectors
inputs_first <- 1:5
inputs_second <- 6:10
# Function to vectorize
add_two_values <- function(x, y) {
return(x + y)
}
outputs <- map2(inputs_first, inputs_second, add_two_values)
outputs
# [[1]]
# [1] 7
# [[2]]
# [1] 9
# [[3]]
# [1] 11
# [[4]]
# [1] 13
# [[5]]
# [1] 15
input_score <- 50
add_extra_credit <- function(score, extra_credit) {
if (extra_credit == "None") {
points_to_add <- 0
} else if (extra_credit == "Low") {
points_to_add <- 1
} else {
points_to_add <- 5
}
return(score + points_to_add)
}
no_extra_credit_score <- add_extra_credit(input_score, "None")
low_extra_credit_score <- add_extra_credit(input_score, "Low")
high_extra_credit_score <- add_extra_credit(input_score, "High")
# Data: Protein Assay Signal Measurements
protein_concentration <- c(5e-6, 2.5e-6, 1.25e-6, 6.25e-7, 3.125e-7, 1.5625e-7, 7.8125e-8, 3.90625e-8, 1.953125e-8, 9.765625e-9)
signal <- c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803)
# Background controls
buffer_no_protein_substrate <- 44577  # Arbitrary unit (AU)
buffer_no_protein_no_substrate <- 25  # Arbitrary unit (AU)
# Step 1: Correct for background signal
background_signal <- buffer_no_protein_no_substrate
corrected_signal <- signal - background_signal
# Step 2: Normalize the data between 0 and 1
min_signal <- min(corrected_signal)
max_signal <- max(corrected_signal)
normalized_signal <- (corrected_signal - min_signal) / (max_signal - min_signal)
# Step 3: Combine data into a dataframe
data <- data.frame(
Protein_Concentration = protein_concentration,
Signal = signal,
Corrected_Signal = corrected_signal,
Normalized_Signal = normalized_signal
)
# Step 4: Plot Normalized Signal vs Protein Concentration
library(ggplot2)
ggplot(data, aes(x = Protein_Concentration, y = Normalized_Signal)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
scale_x_log10() +  # Log scale for x-axis
labs(
title = "Normalized Signal vs Protein Concentration",
x = "Protein Concentration (M) (Log Scale)",
y = "Normalized Signal (AU)"
) +
theme_minimal()
# Optional: View the data in a table
print(data)
# Data: Protein Assay Signal Measurements
protein_concentration <- c(5e-6, 2.5e-6, 1.25e-6, 6.25e-7, 3.125e-7, 1.5625e-7, 7.8125e-8, 3.90625e-8, 1.953125e-8, 9.765625e-9)
signal <- c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803)
# Background controls
buffer_no_protein_substrate <- 44577  # Arbitrary unit (AU)
buffer_no_protein_no_substrate <- 25  # Arbitrary unit (AU)
# Step 1: Correct for background signal
background_signal <- buffer_no_protein_no_substrate
corrected_signal <- signal - background_signal
# Step 2: Normalize the data between 0 and 1
min_signal <- min(corrected_signal)
max_signal <- max(corrected_signal)
normalized_signal <- (corrected_signal - min_signal) / (max_signal - min_signal)
# Step 3: Combine data into a dataframe
data <- data.frame(
Protein_Concentration = protein_concentration,
Signal = signal,
Corrected_Signal = corrected_signal,
Normalized_Signal = normalized_signal
)
# Step 4: Plot Normalized Signal vs Protein Concentration
library(ggplot2)
ggplot(data, aes(x = Protein_Concentration, y = Normalized_Signal)) +
geom_line(color = "black") +
geom_point(color = "blue") +
scale_x_log10() +  # Log scale for x-axis
labs(
title = "Normalized Signal vs Protein Concentration",
x = "Protein Concentration (M) (Log Scale)",
y = "Normalized Signal (AU)"
) +
theme_minimal()
# Optional: View the data in a table
print(data)
# Data: Protein Assay Signal Measurements
protein_concentration <- c(5e-6, 2.5e-6, 1.25e-6, 6.25e-7, 3.125e-7, 1.5625e-7, 7.8125e-8, 3.90625e-8, 1.953125e-8, 9.765625e-9)
signal <- c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803)
# Background controls
buffer_no_protein_substrate <- 44577  # Arbitrary unit (AU)
buffer_no_protein_no_substrate <- 25  # Arbitrary unit (AU)
# Correct for background signal
background_signal <- buffer_no_protein_no_substrate
corrected_signal <- signal - background_signal
# Normalize the data between 0 and 1
min_signal <- min(corrected_signal)
max_signal <- max(corrected_signal)
normalized_signal <- (corrected_signal - min_signal) / (max_signal - min_signal)
# Combine data into a dataframe
data <- data.frame(
Protein_Concentration = protein_concentration,
Signal = signal,
Corrected_Signal = corrected_signal,
Normalized_Signal = normalized_signal
)
# Plot Normalized Signal vs Protein Concentration
library(ggplot2)
ggplot(data, aes(x = Protein_Concentration, y = Normalized_Signal)) +
geom_line(color = "black") +
geom_point(color = "blue") +
scale_x_log10() +  # Log scale for x-axis
labs(
title = "Normalized Signal vs Protein Concentration",
x = "Protein Concentration (M) (Log Scale)",
y = "Normalized Signal (AU)"
) +
theme_minimal()
print(data)
# Data: Protein Assay Signal Measurements
protein_concentration <- c(5e-6, 2.5e-6, 1.25e-6, 6.25e-7, 3.125e-7, 1.5625e-7, 7.8125e-8, 3.90625e-8, 1.953125e-8, 9.765625e-9)
signal <- c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803)
# Background controls
buffer_no_protein_substrate <- 44577  # Arbitrary unit (AU)
buffer_no_protein_no_substrate <- 25  # Arbitrary unit (AU)
# Correct for background signal
background_signal <- buffer_no_protein_no_substrate
corrected_signal <- signal - background_signal
# Normalize the data between 0 and 1
min_signal <- min(corrected_signal)
max_signal <- max(corrected_signal)
normalized_signal <- (corrected_signal - min_signal) / (max_signal - min_signal)
# Combine data into a dataframe
data <- data.frame(
Protein_Concentration = protein_concentration,
Signal = signal,
Corrected_Signal = corrected_signal,
Normalized_Signal = normalized_signal
)
# Plot Normalized Signal vs Protein Concentration
library(ggplot2)
ggplot(data, aes(x = Protein_Concentration, y = Normalized_Signal)) +
geom_line(color = "black") +
geom_point(color = "blue") +
scale_x_log10() +  # Log scale for x-axis
labs(
title = "Normalized Signal vs Protein Concentration",
x = "Protein Concentration (M) (Log Scale)",
y = "Normalized Signal (AU)"
) +
theme_minimal()
print(data)
# Input data
data <- data.frame(
Concentration = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125, 0.0390625, 0.01953125, 0.009765625, 0.0048828125),
Signal = c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803, 45045)
)
# Background signal
background <- 25
# Correct the signals by subtracting the background
data$Corrected_Signal <- data$Signal - background
# Normalize the corrected signals to the range [0, 1]
data$Normalized_Signal <- (data$Corrected_Signal - min(data$Corrected_Signal)) /
(max(data$Corrected_Signal) - min(data$Corrected_Signal))
# Plot normalized signal vs protein concentration
plot(
data$Concentration, data$Normalized_Signal,
type = "b", log = "x", # Log scale for x-axis
xlab = "Protein Concentration (µM)",
ylab = "Normalized Signal",
main = "Normalized Signal vs Protein Concentration",
pch = 16, col = "blue"
)
# Data: Protein Assay Signal Measurements
protein_concentration <- c(5e-6, 2.5e-6, 1.25e-6, 6.25e-7, 3.125e-7, 1.5625e-7, 7.8125e-8, 3.90625e-8, 1.953125e-8, 9.765625e-9)
signal <- c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803)
# Background controls
buffer_no_protein_substrate <- 44577  # Arbitrary unit (AU)
buffer_no_protein_no_substrate <- 25  # Arbitrary unit (AU)
# Correct for background signal
background_signal <- buffer_no_protein_no_substrate
corrected_signal <- signal - background_signal
# Normalize the data between 0 and 1
min_signal <- min(corrected_signal)
max_signal <- max(corrected_signal)
normalized_signal <- (corrected_signal - min_signal) / (max_signal - min_signal)
# Combine data into a dataframe
data <- data.frame(
Protein_Concentration = protein_concentration,
Signal = signal,
Corrected_Signal = corrected_signal,
Normalized_Signal = normalized_signal
)
# Plot Normalized Signal vs Protein Concentration
library(ggplot2)
ggplot(data, aes(x = Protein_Concentration, y = Normalized_Signal)) +
geom_line(color = "black") +
geom_point(color = "blue") +
scale_x_log10() +  # Log scale for x-axis
labs(
title = "Normalized Signal vs Protein Concentration",
x = "Protein Concentration (M) (Log Scale)",
y = "Normalized Signal (AU)"
) +
theme_minimal()
print(data)
# Input data
data <- data.frame(
Concentration = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125, 0.0390625, 0.01953125, 0.009765625, 0.0048828125),
Signal = c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803, 45045)
)
# Background signal
background <- 25
# Correct the signals by subtracting the background
data$Corrected_Signal <- data$Signal - background
# Normalize the corrected signals to the range [0, 1]
data$Normalized_Signal <- (data$Corrected_Signal - min(data$Corrected_Signal)) /
(max(data$Corrected_Signal) - min(data$Corrected_Signal))
# Plot normalized signal vs protein concentration
plot(
data$Concentration, data$Normalized_Signal,
type = "b", log = "x", # Log scale for x-axis
xlab = "Protein Concentration (µM)",
ylab = "Normalized Signal",
main = "Normalized Signal vs Protein Concentration",
pch = 16, col = "blue"
)
# Data: Protein Concentrations (µM) and Signals (AU)
protein_concentration <- c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125, 0.0390625, 0.01953125, 0.009765625, 0.0048828125)
signal <- c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803, 45045)
# Background Signal
background_signal <- 25
# Correct for Background Signal
corrected_signal <- signal - background_signal
# Normalize the Data to Range [0, 1]
min_signal <- min(corrected_signal)
max_signal <- max(corrected_signal)
normalized_signal <- (corrected_signal - min_signal) / (max_signal - min_signal)
# Combine into a DataFrame
data <- data.frame(Protein_Concentration = protein_concentration, Signal = signal,
Corrected_Signal = corrected_signal, Normalized_Signal = normalized_signal)
# Plot: Normalized Signal vs Protein Concentration
plot(
data$Protein_Concentration, data$Normalized_Signal,
type = "b", log = "x",  # Logarithmic x-axis
xlab = "Protein Concentration (µM)",
ylab = "Normalized Signal",
main = "Normalized Signal vs Protein Concentration",
pch = 16, col = "blue"
)
# Add grid for clarity
grid()
# Data: Protein Concentrations (µM) and Signals (AU)
protein_concentration <- c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125, 0.0390625, 0.01953125, 0.009765625, 0.0048828125)
signal <- c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803, 45045)
# Background Signal
background_signal <- 25
# Correct for Background Signal
corrected_signal <- signal - background_signal
# Normalize the Data to Range [0, 1]
min_signal <- min(corrected_signal)
max_signal <- max(corrected_signal)
normalized_signal <- (corrected_signal - min_signal) / (max_signal - min_signal)
# Combine into a DataFrame
data <- data.frame(Protein_Concentration = protein_concentration, Signal = signal,
Corrected_Signal = corrected_signal, Normalized_Signal = normalized_signal)
# Plot: Normalized Signal vs Protein Concentration
plot(
data$Protein_Concentration, data$Normalized_Signal,
type = "b", log = "x",  # Logarithmic x-axis
xlab = "Protein Concentration (µM)",
ylab = "Normalized Signal",
main = "Normalized Signal vs Protein Concentration",
pch = 16, col = "blue"
)
# Add grid for clarity
grid()
# Data: Protein Concentrations (µM) and Signals (AU)
protein_concentration <- c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125, 0.0390625, 0.01953125, 0.009765625, 0.0048828125)
signal <- c(258, 293, 379, 14023, 30866, 38242, 43289, 44514, 45744, 46803, 45045)
# Background Signal
background_signal <- 25
# Correct for Background Signal
corrected_signal <- signal - background_signal
# Normalize the Data to Range [0, 1]
min_signal <- min(corrected_signal)
max_signal <- max(corrected_signal)
normalized_signal <- (corrected_signal - min_signal) / (max_signal - min_signal)
# Combine into a DataFrame
data <- data.frame(Protein_Concentration = protein_concentration, Signal = signal,
Corrected_Signal = corrected_signal, Normalized_Signal = normalized_signal)
# Plot: Normalized Signal vs Protein Concentration
plot(
data$Protein_Concentration, data$Normalized_Signal,
type = "b", log = "x",  # Logarithmic x-axis
xlab = "Protein Concentration (µM)",
ylab = "Normalized Signal",
main = "Normalized Signal vs Protein Concentration",
pch = 16, col = "blue"
)
# Add grid for clarity
grid()
# Invert the Normalized Signal
inverted_signal <- 1 - (corrected_signal - min_signal) / (max_signal - min_signal)
# Update the DataFrame with the Inverted Signal
data$Inverted_Signal <- inverted_signal
# Plot: Inverted Signal vs Protein Concentration
plot(
data$Protein_Concentration, data$Inverted_Signal,
type = "b", log = "x",  # Logarithmic x-axis
xlab = "Protein Concentration (µM)",
ylab = "Inverted Normalized Signal",
main = "Inverted Signal vs Protein Concentration",
pch = 16, col = "red"
)
# Add grid for clarity
grid()
# Data
concentration <- c(5.0, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125, 0.0390625, 0.01953125, 0.009765625, 0.0048828125)
normalized_signal <- c(0, 0.00075, 0.00259, 0.29573, 0.66076, 0.82161, 0.92974, 0.95428, 0.98244, 1, 0.96682)
# Plot
plot(
concentration, normalized_signal,
type = "b", log = "x",
xlab = "Protein Concentration (µM)",
ylab = "Normalized Signal",
main = "Normalized Signal vs Protein Concentration",
pch = 16, col = "blue"
)
# Add gridlines
grid()
# Data
concentration <- c(5.0, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125, 0.0390625, 0.01953125, 0.009765625, 0.0048828125)
normalized_signal <- c(0, 0.00075, 0.00259, 0.29573, 0.66076, 0.82161, 0.92974, 0.95428, 0.98244, 1, 0.96682)
# Plot
plot(
concentration, normalized_signal,
type = "b", log = "x",
xlab = "Protein Concentration (µM)",
ylab = "Normalized Signal",
main = "Normalized Signal vs Protein Concentration",
pch = 16, col = "black"
)
# Add gridlines
grid()
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install biomaRt
BiocManager::install("biomaRt")
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install biomaRt
BiocManager::install("biomaRt")
library(biomaRt)
library(MafDb.TOPMed.freeze5.hg19)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(version = "3.17")  # Replace with the latest version if necessary
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(version = "3.20")
yes
force = TRUE
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(version = "3.20")  # Replace with the latest version if necessary
library(biomaRt)
library(MafDb.TOPMed.freeze5.hg19)
library(SNPlocs.Hsapiens.dbSNP144.GRCh37)
library(VariantAnnotation)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(version = "3.20")  # Replace with the latest version if necessary
yes
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(version = "3.20")  # Replace with the latest version if necessary
Yes
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(update = TRUE, ask = FALSE)
yes
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(update = TRUE, ask = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(update = TRUE, ask = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("fgsea", type = "binary")
# Install biomaRt
BiocManager::install("biomaRt")
library(biomaRt)
library(MafDb.TOPMed.freeze5.hg19)
# Install biomaRt
BiocManager::install("biomaRt")
options(install.packages.check.source = "no")
# Ensure BiocManager is installed and up-to-date
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install and update all required packages
BiocManager::install(c(
"biomaRt",
"MafDb.TOPMed.freeze5.hg19",
"SNPlocs.Hsapiens.dbSNP144.GRCh37",
"VariantAnnotation"
), ask = FALSE, update = TRUE, force = TRUE)
library(biomaRt)
library(MafDb.TOPMed.freeze5.hg19)
options(install.packages.check.source = "no")
# Ensure BiocManager is installed and up-to-date
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install and update all required packages
BiocManager::install(c(
"biomaRt",
"MafDb.TOPMed.freeze5.hg19",
"SNPlocs.Hsapiens.dbSNP144.GRCh37",
"VariantAnnotation"
), ask = FALSE, update = TRUE, force = TRUE)
library(biomaRt)
library(MafDb.TOPMed.freeze5.hg19)
library(SNPlocs.Hsapiens.dbSNP144.GRCh37)
library(VariantAnnotation)
library(biomaRt)
library(MafDb.TOPMed.freeze5.hg19)
library(SNPlocs.Hsapiens.dbSNP144.GRCh37)
library(VariantAnnotation)
setwd("/Users/putriramadani/Documents/GitHub/VariantAnnotation-Primary_immunodef/Data")
# check column names
colnames(genes)
# variant annotation on primary immunodeficiency
# Load the necessary library
library(biomaRt)
# Load gene list
genes <- read.delim("Primary immunodeficiency or monogenic inflammatory bowel disease.tsv", sep = "\t", header = TRUE)
# check column names
colnames(genes)
